<style>
  .currencies div{
    margin: 0 auto !important;
    text-align: center;

  }
</style>
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
  <h1 class="h2">Dashboard</h1>
  <div class="btn-toolbar mb-2 mb-md-0">
    <div class="btn-group mr-2">
      <button type="button" class="btn btn-sm btn-outline-secondary time" onclick="updateData(this, 'day')" id="day">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-calendar"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
              1D
      </button>
      <button type="button" class="btn btn-sm btn-outline-secondary time" onclick="updateData(this, 'week')" id="week">
              1W
      </button>
      <button type="button" class="btn btn-sm btn-outline-secondary time " onclick="updateData(this, 'month')"  id="month">
              1M
      </button>
      <button type="button" class="btn btn-sm btn-outline-secondary time" onclick="updateData(this, 'months')" id="months">
              3M
      </button>
      <button type="button" class="btn btn-sm btn-outline-secondary time active" onclick="updateData(this, 'year')" id="year">
              1Y
      </button>
    </div>
  </div>
</div>

<canvas class="my-4 w-100" id="myChart" width="900" height="380"></canvas>
<div class="row">
  <div class="col-12">
    <div class="btn-toolbar mb-2 mb-md-0 currencies">
      <div class="btn-group mr-2">
        <% @currencies.each do |currency| %>
          <button
                  type="button"
                  onclick="toggleDataset(this, '<%= currency.code %>')"
                  class="btn btn-sm btn-outline-secondary <%= (currency.code == @current_currency.code )? 'active': ''%>">
            <%= currency.code %>
          </button>
        <% end %>
      </div>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-12">
    <h2>Detail <%= @current_currency.code %></h2>
    <div class="table-responsive">
      <table class="table table-striped table-sm" id="detail">
        <thead>
          <tr>
            <th>Date</th>
            <th>Bid</th>
            <th>Ask</th>
            <th colspan="2">VARIATION</th>
            <th>Min</th>
            <th>Max</th>
          </tr>
        </thead>
        <tbody>
          <% @quotations.each do | row |%>
            <tr>
              <td><%= row.date %></td>
              <td><%= row.bid_value %></td>
              <td><%= row.ask_value %></td>
              <td><%= row.variation_percent_bid %></td>
              <td><%= row.variation_bid %></td>
              <td><%= row.min_bid %></td>
              <td><%= row.max_bid %></td>
            </tr>
          <% end %>

        </tbody>
      </table>
    </div>
  </div>
</div>



<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.min.js"></script>

  <script>
    window.randomScalingFactor = function() {
      return 100
    };
    var colorNames = [
      // red:
      'rgb(255, 99, 132)',
      // orange:
      'rgb(255, 159, 64)',
      // yellow:
      'rgb(255, 205, 86)',
      // green:
      'rgb(75, 192, 192)',
      // blue:
      'rgb(54, 162, 235)',
      // purple:
      'rgb(153, 102, 255)',
      // grey:
      'rgb(201, 203, 207)'
    ]
    var currencyColors =  {}
    <% @currencies.each_with_index do |currency, index| %>
      currencyColors['<%= currency.code %>'] = <%= index %>
    <% end %>
    var config = {
      type: 'line',
      data: {
        labels: [],
        datasets: []
      },
      options: {
        elements: {
          point:{
              radius: 0
          }
        },
        responsive: true,
        title: {
          display: true,
          text: 'Currencies Quotation'
        },
        tooltips: {
          mode: 'x-axis',
          intersect: false,
        },
        hover: {
          mode: 'nearest',
          intersect: true
        },
        legend: {
          display: true,
          position: 'bottom'
        },
        scales: {
            xAxes: [{
                ticks: {
                    autoSkip: true,
                    maxTicksLimit: 3
                }
            }],
           yAxes: [{
              beginAtZero: false
           }]
        }
      }
    };

    window.onload = function() {
      var ctx = document.getElementById('myChart').getContext('2d');
      window.myLine = new Chart(ctx, config);
      console.log("onload")
      loadData('<%= @current_currency.code %>', 'year');
    };

    function toggleDataset(element, currency){
      console.log(currency);
      if (element !== undefined && element.classList.contains('active')) {
        element.classList.remove("active");
        removeDataset(currency);
      } else {
        element.classList.add("active");
        loadData(currency);
      }
    }

    function addDataset(data, labels, currency, maxLabels) {
        var colorIndex = currencyColors[currency];
        var newColor = colorNames[colorIndex];
        console.log(newColor);
        var newDataset = {
          label: currency,
          backgroundColor: newColor,
          borderColor: newColor,
          borderWidth: 4,
          lineTension: 0,
          data: data,
          fill: false
        };
        config.data.datasets.push(newDataset);
        config.data.labels = labels
        config.options.scales.xAxes = [{
          ticks: {
            autoSkip: true,
            maxTicksLimit: maxLabels
          }
        }]
        window.myLine.update();
    }

    function updateData(element, interval){
      document.getElementsByClassName("time active")[0].classList.remove("active");
      element.classList.add("active");
      var datasets = [...config.data.datasets];
      config.data.datasets = [];
      window.myLine.update();
      for (var i = 0; i < datasets.length; i++) {
        console.log(datasets[i].label);
        loadData(datasets[i].label, interval)
      }
    }

    function loadData(currency, interval){
      interval = interval || document.getElementsByClassName("time active")[0].id;
      var xhr = typeof XMLHttpRequest != 'undefined'
        ? new XMLHttpRequest()
        : new ActiveXObject('Microsoft.XMLHTTP');
      xhr.open('GET', '/quotations.json?currrency=' + currency + '&interval=' + interval);
      xhr.onload = function() {
          if (xhr.status === 200) {
              currencyInfo = JSON.parse(xhr.responseText);
              console.log(currencyInfo);
              var obj;
              var data = []
              var labels = []
              for (var i = 0; i < currencyInfo.data.length; i++) {
                obj = currencyInfo.data[i]
                data.push(parseFloat(obj.ask_value));
              }
              addDataset(data, currencyInfo.labels, currency, currencyInfo.maxLabels)
          }
          else {
              alert('Request failed.  Returned status of ' + xhr.status);
          }
      };
      xhr.send();
    }

    function removeDataset(currency) {
      console.log(config.data.datasets);
      for (var i = 0; i < config.data.datasets.length; i++) {
        var obj = config.data.datasets[i];
        if (obj.label === currency){
          config.data.datasets.splice(i, 1);
        }
      }
      window.myLine.update();
    }

</script>